name: Test

on:
  push:
    branches: [ main, develop, feature/*]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    # services:
      # chat-demo-db-testing:
      #   image: mysql:8.0
      #   ports:
      #     - 53306:3306
      #   env:
      #     MYSQL_ROOT_PASSWORD: chat
      #     MYSQL_DATABASE: chat_db_testing
      #     MYSQL_USER: chat
      #     MYSQL_PASSWORD: chat
      #   options: >-
      #     --health-cmd "mysqladmin ping"
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5
    steps:
    - uses: actions/checkout@v3

    - uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true

    - name: .env copy for docker
      run: |
        cp -a .env.docker .env 

    - name: docker-compose version
      run: |
        docker-compose -v

    - name: docker-compose up
      run: |
        docker-compose build chat-demo-db-testing |
        docker-compose build chat-demo-db |
        docker-compose build chat-demo-backend |
        docker-compose up -d chat-demo-db-testing chat-demo-db  chat-demo-backend
    
    - name: Wait for starting
      run: |
        set -x
        until [ "$(docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q chat-demo-db-testing))" = 'healthy' ]; do
          sleep 1s
        done
    
    # - name: docker ps
    #   run: |
    #     docker ps

    # - name: env copy
    #   run: |
    #     docker cp ./docker/db/my.cnf chat-demo-db-testing_1:/etc/mysql/conf.d/my.cnf

    - name: php version
      run: |
        docker exec chat-demo-backend  /bin/sh -c "php -v"

    - name: composer version
      run: |
        docker exec chat-demo-backend  /bin/sh -c "composer -V"

    - name: composer install
      run: |
        docker exec chat-demo-backend  /bin/sh -c "composer install"
    
    - name: phpunit
      run: |
        docker exec chat-demo-backend  /bin/sh -c  "php artisan test"
  notify:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: mechiru/chatwork@v2
        with:
          roomId: 299256157
          token: ${{ secrets.CHATWORK_API_TOKEN }}
          mapping: |
            {}
          context: ${{ toJson(github) }}


