version: "3.9"
volumes:
  # chat-demo-socket:
  # name: chat-demo-socket
  chat-demo-node-modules:
    name: chat-demo-node-modules
  chat-demo-socket-node-modules:
    name: chat-demo-socket-node-modules
  # chat-demo-db-testing-volume:
  #   name: chat-demo-db-testing-volume

networks:
  chat-demo-network:
    name: chat-demo-network

services:
  chat-demo-proxy:
    build:
      context: .
      dockerfile: ./docker/web/Dockerfile
    env_file:
      - .env
    container_name: chat-demo-proxy
    ports:
      - "${PROXY_TCP_PORT}:${PROXY_PORT}"
    depends_on:
      - chat-demo-backend
      - chat-demo-frontend
    volumes:
      - ./docker/web/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/web/default.conf:/etc/nginx/conf.d/default.conf
      # - "chat-demo-socket:/var/run/php-fpm/"
      # - ./docker/web/proxy-php.conf:/usr/local/apache2/conf/extra/proxy-php.conf
    environment:
      - TZ=Asia/Tokyo
    networks:
      - chat-demo-network
    
  chat-demo-frontend:
    build:
      context: .
      dockerfile: ./docker/vue/Dockerfile
    container_name: chat-demo-frontend
    networks:
      - chat-demo-network
    volumes:
      - ./frontend:/var/www
      - chat-demo-node-modules:/var/www/node_modules
    command: sh -c "yarn install && yarn serve"

  chat-demo-backend:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
    container_name: chat-demo-backend
    volumes:
      # - "chat-demo-socket:/var/run/php-fpm/"
      - ./backend:/var/www/
      - ./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
    depends_on:
      - chat-demo-db
    networks:
      - chat-demo-network
    environment:
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}

  chat-demo-db:
    image: mysql:8.0
    container_name: chat-demo-db
    networks:
      - chat-demo-network
    ports:
      - ${DB_TCP_PORT}:${DB_PORT}
    volumes:
      - ./docker/db/data:/var/lib/mysql
      - ./docker/db/my.cnf:/etc/mysql/conf.d/my.cnf
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: 'Asia/Tokyo'
    command:  >
      bash -c '
      touch /var/log/general.log &&
      chown mysql:mysql /var/log/general.log &&
      tail -f /var/log/general.log &
      /entrypoint.sh mysqld
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --general-log=true
      --general-log-file=/var/log/general.log
      --default-authentication-plugin=mysql_native_password
      '
    logging:
      options:
        max-size: "10k"
        max-file: "5"

  chat-demo-db-testing:
    image: mysql:8.0
    networks:
      - chat-demo-network
    ports:
      - ${DB_TESTING_TCP_PORT}:${DB_TESTING_PORT}
    volumes:
      # - chat-demo-db-testing-volume:/var/lib/mysql
      - ./docker/db/my.cnf:/etc/mysql/conf.d/my.cnf
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: 'Asia/Tokyo'
    ## ログをターミナルに標準出力する確認
    command:  >
      bash -c '
      touch /var/log/general.log &&
      chown mysql:mysql /var/log/general.log &&
      tail -f /var/log/general.log &
      /entrypoint.sh mysqld
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --general-log=true
      --general-log-file=/var/log/general.log
      --default-authentication-plugin=mysql_native_password
      '
    logging:
      options:
        max-size: "10k"
        max-file: "5"
    healthcheck:
        test: ["CMD", "mysqladmin", "ping"]
        interval: 10s
        timeout: 5s
        retries: 5

  chat-demo-socket:
    build:
      context: .
      dockerfile: ./docker/socket/Dockerfile
    container_name: chat-demo-socket
    networks:
      - chat-demo-network
    volumes:
      - ./socket:/var/www
      - chat-demo-socket-node-modules:/var/www/node_modules
    command: sh -c "yarn install && yarn start"

  chat-demo-redis:
      image: redis:latest
      container_name: chat-demo-redis
      networks:
        - chat-demo-network
      ports:
        - 6379:6379
      volumes:
        - ./docker/redis/data:/data
      ## - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
      ## command: "redis-server /usr/local/etc/redis/redis.conf"
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        retries: 3
        timeout: 5s